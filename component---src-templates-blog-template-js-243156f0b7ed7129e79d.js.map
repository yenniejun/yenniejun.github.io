{"version":3,"file":"component---src-templates-blog-template-js-243156f0b7ed7129e79d.js","mappings":"0MACWA,EAAgB,4CAChBC,EAAa,yCACbC,EAAW,uCACXC,EAAkB,8CAClBC,EAAa,yCACbC,EAAY,wCCDR,SAASC,EAAQC,GAE5B,IAF6B,KAC/BC,GACDD,EACC,MAAM,eAAEE,GAAmBD,EAC3BE,QAAQC,IAAI,kBAAmBF,GAC/B,MAAM,YAAEG,EAAW,KAAEC,GAASJ,EAC9B,OACIK,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAAA,OAAKE,UAAWC,GACY,SAAvBL,EAAYM,UACXJ,EAAAA,cAAA,OAAKE,UAAWC,GACdH,EAAAA,cAAA,UAAKF,EAAYO,OACjBL,EAAAA,cAAA,WAAK,YAAUF,EAAYQ,OAIP,UAAvBR,EAAYM,UACXJ,EAAAA,cAAA,OAAKE,UAAWC,GACdH,EAAAA,cAAA,UAAKF,EAAYO,OAEjBL,EAAAA,cAAA,SAAOE,UAAWC,GAChBH,EAAAA,cAAA,aACEA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAKF,EAAYS,SAEnBP,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,UAAKF,EAAYQ,OAEnBN,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,UACJA,EAAAA,cAAA,UAAKF,EAAYU,OAAOC,QAAQ,GAAK,WAI3CT,EAAAA,cAAA,SAAIF,EAAYY,MAAQV,EAAAA,cAAA,KAAGW,KAAMb,EAAYY,KAAME,OAAO,SAASC,IAAI,cAAa,oBAKxFb,EAAAA,cAAA,MAAIE,UAAWC,IACfH,EAAAA,cAAA,OACIE,UAAWC,EACXW,wBAAyB,CAAEC,OAAQhB,MAMnD,C","sources":["webpack://gatsby-starter-default/./src/templates/blogTemplate.module.css","webpack://gatsby-starter-default/./src/templates/blogTemplate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var blogContainer = \"blogTemplate-module--blogContainer--26d52\";\nexport var blogHeader = \"blogTemplate-module--blogHeader--49fc3\";\nexport var blogLine = \"blogTemplate-module--blogLine--2a74c\";\nexport var blogPostContent = \"blogTemplate-module--blogPostContent--bea63\";\nexport var bookHeader = \"blogTemplate-module--bookHeader--04175\";\nexport var bookTable = \"blogTemplate-module--bookTable--30b6f\";","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport * as templateStyles from './blogTemplate.module.css' \n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds your post data\n  console.log('markdown remark', markdownRemark)\n  const { frontmatter, html } = markdownRemark\n  return (\n      <Layout>\n        <div className={templateStyles.blogContainer}>\n            {frontmatter.posttype===\"blog\" &&\n              <div className={templateStyles.blogHeader}>\n                <h1>{frontmatter.title}</h1>\n                <div>Written: {frontmatter.date}</div>\n              </div>\n            }\n\n            {frontmatter.posttype===\"books\" &&\n              <div className={templateStyles.bookHeader}>\n                <h1>{frontmatter.title}</h1>\n\n                <table className={templateStyles.bookTable}>\n                  <tbody>\n                    <tr>\n                      <td>Author</td>\n                      <td>{frontmatter.author}</td>\n                    </tr>\n                    <tr>\n                      <td>Finished</td>\n                      <td>{frontmatter.date}</td>\n                    </tr>\n                    <tr>\n                      <td>Rating</td>\n                      <td>{frontmatter.rating.toFixed(1) + \" / 5\"}</td>\n                    </tr>\n                  </tbody>\n                </table>\n                <p>{frontmatter.link && <a href={frontmatter.link} target=\"_blank\" rel=\"noreferrer\">Goodreads link</a>}</p>\n\n              </div>\n            }     \n            \n            <hr className={templateStyles.blogLine}/>\n            <div\n                className={templateStyles.blogPostContent}\n                dangerouslySetInnerHTML={{ __html: html }}\n            />\n        </div>\n    </Layout>\n    \n  )\n}\n\n\n// export const pageQuery = graphql`\n// query BlogPage($path: String!) {\n//   allMarkdownRemark(\n//     sort: { fields: [frontmatter___date], order: DESC }\n//     filter: { frontmatter: { path: { eq: $path } } }\n//   ) {\n//     html\n//       frontmatter {\n//         date(formatString: \"MMMM DD, YYYY\")\n//         path\n//         title\n//         author\n//         posttype\n//         link\n//         rating\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const pageQuery = graphql`\n  query BlogPostByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        author\n        posttype\n        link\n        rating\n      }\n    }\n  }\n`"],"names":["blogContainer","blogHeader","blogLine","blogPostContent","bookHeader","bookTable","Template","_ref","data","markdownRemark","console","log","frontmatter","html","React","Layout","className","templateStyles","posttype","title","date","author","rating","toFixed","link","href","target","rel","dangerouslySetInnerHTML","__html"],"sourceRoot":""}